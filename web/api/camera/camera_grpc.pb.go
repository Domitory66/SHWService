// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: camera/camera.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CameraWorkerClient is the client API for CameraWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraWorkerClient interface {
	FindCamera(ctx context.Context, in *FindCameraRequest, opts ...grpc.CallOption) (*FindCameraResponse, error)
	AddCamera(ctx context.Context, in *AddCameraRequest, opts ...grpc.CallOption) (*AddCameraResponse, error)
	DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*DeleteCameraResponse, error)
	GetAllCameras(ctx context.Context, in *GetAllCamerasRequest, opts ...grpc.CallOption) (*GetAllCamerasResponse, error)
	GetCameraByPortAndIp(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraResponse, error)
}

type cameraWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraWorkerClient(cc grpc.ClientConnInterface) CameraWorkerClient {
	return &cameraWorkerClient{cc}
}

func (c *cameraWorkerClient) FindCamera(ctx context.Context, in *FindCameraRequest, opts ...grpc.CallOption) (*FindCameraResponse, error) {
	out := new(FindCameraResponse)
	err := c.cc.Invoke(ctx, "/CameraWorker/FindCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraWorkerClient) AddCamera(ctx context.Context, in *AddCameraRequest, opts ...grpc.CallOption) (*AddCameraResponse, error) {
	out := new(AddCameraResponse)
	err := c.cc.Invoke(ctx, "/CameraWorker/AddCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraWorkerClient) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*DeleteCameraResponse, error) {
	out := new(DeleteCameraResponse)
	err := c.cc.Invoke(ctx, "/CameraWorker/DeleteCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraWorkerClient) GetAllCameras(ctx context.Context, in *GetAllCamerasRequest, opts ...grpc.CallOption) (*GetAllCamerasResponse, error) {
	out := new(GetAllCamerasResponse)
	err := c.cc.Invoke(ctx, "/CameraWorker/GetAllCameras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraWorkerClient) GetCameraByPortAndIp(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*GetCameraResponse, error) {
	out := new(GetCameraResponse)
	err := c.cc.Invoke(ctx, "/CameraWorker/GetCameraByPortAndIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraWorkerServer is the server API for CameraWorker service.
// All implementations must embed UnimplementedCameraWorkerServer
// for forward compatibility
type CameraWorkerServer interface {
	FindCamera(context.Context, *FindCameraRequest) (*FindCameraResponse, error)
	AddCamera(context.Context, *AddCameraRequest) (*AddCameraResponse, error)
	DeleteCamera(context.Context, *DeleteCameraRequest) (*DeleteCameraResponse, error)
	GetAllCameras(context.Context, *GetAllCamerasRequest) (*GetAllCamerasResponse, error)
	GetCameraByPortAndIp(context.Context, *GetCameraRequest) (*GetCameraResponse, error)
	mustEmbedUnimplementedCameraWorkerServer()
}

// UnimplementedCameraWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedCameraWorkerServer struct {
}

func (UnimplementedCameraWorkerServer) FindCamera(context.Context, *FindCameraRequest) (*FindCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCamera not implemented")
}
func (UnimplementedCameraWorkerServer) AddCamera(context.Context, *AddCameraRequest) (*AddCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCamera not implemented")
}
func (UnimplementedCameraWorkerServer) DeleteCamera(context.Context, *DeleteCameraRequest) (*DeleteCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCamera not implemented")
}
func (UnimplementedCameraWorkerServer) GetAllCameras(context.Context, *GetAllCamerasRequest) (*GetAllCamerasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCameras not implemented")
}
func (UnimplementedCameraWorkerServer) GetCameraByPortAndIp(context.Context, *GetCameraRequest) (*GetCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCameraByPortAndIp not implemented")
}
func (UnimplementedCameraWorkerServer) mustEmbedUnimplementedCameraWorkerServer() {}

// UnsafeCameraWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraWorkerServer will
// result in compilation errors.
type UnsafeCameraWorkerServer interface {
	mustEmbedUnimplementedCameraWorkerServer()
}

func RegisterCameraWorkerServer(s grpc.ServiceRegistrar, srv CameraWorkerServer) {
	s.RegisterService(&CameraWorker_ServiceDesc, srv)
}

func _CameraWorker_FindCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraWorkerServer).FindCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CameraWorker/FindCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraWorkerServer).FindCamera(ctx, req.(*FindCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraWorker_AddCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraWorkerServer).AddCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CameraWorker/AddCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraWorkerServer).AddCamera(ctx, req.(*AddCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraWorker_DeleteCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraWorkerServer).DeleteCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CameraWorker/DeleteCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraWorkerServer).DeleteCamera(ctx, req.(*DeleteCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraWorker_GetAllCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraWorkerServer).GetAllCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CameraWorker/GetAllCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraWorkerServer).GetAllCameras(ctx, req.(*GetAllCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraWorker_GetCameraByPortAndIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraWorkerServer).GetCameraByPortAndIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CameraWorker/GetCameraByPortAndIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraWorkerServer).GetCameraByPortAndIp(ctx, req.(*GetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraWorker_ServiceDesc is the grpc.ServiceDesc for CameraWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CameraWorker",
	HandlerType: (*CameraWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCamera",
			Handler:    _CameraWorker_FindCamera_Handler,
		},
		{
			MethodName: "AddCamera",
			Handler:    _CameraWorker_AddCamera_Handler,
		},
		{
			MethodName: "DeleteCamera",
			Handler:    _CameraWorker_DeleteCamera_Handler,
		},
		{
			MethodName: "GetAllCameras",
			Handler:    _CameraWorker_GetAllCameras_Handler,
		},
		{
			MethodName: "GetCameraByPortAndIp",
			Handler:    _CameraWorker_GetCameraByPortAndIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera/camera.proto",
}
